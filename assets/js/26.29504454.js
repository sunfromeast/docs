(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{252:function(s,e,t){"use strict";t.r(e);var a=t(0),r=Object(a.a)({},function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"service"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#service","aria-hidden":"true"}},[s._v("#")]),s._v(" Service")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("Service定义：")]),s._v(" "),t("blockquote",[t("p",[s._v("它是一种抽象。一组pod的IP是经常变的，为这组pod抽象出一层，为其提供固定的IP，所有对这组pod的访问，都可以通过抽象的这层固定的IP访问，这就是Service。")])])]),s._v(" "),t("li",[t("p",[s._v("本质：")]),s._v(" "),t("blockquote",[t("p",[s._v("Service对象的本质其实是工作节点上的iptables或ipvs规则，主要用于将到达Service对象IP的流量调度转发到相应的Endpoint对象指向的IP+Port（pod）上。工作节点上的kube-proxy会通过apiserver监控service和对应的pod的变化，将变化实时反映到相应的iptables或者ipvs规则上。")])])]),s._v(" "),t("li",[t("p",[s._v("代理模型")]),s._v(" "),t("blockquote",[t("ol",[t("li",[t("p",[s._v("userspace模型"),t("sup",[t("font",{attrs:{color:"red"}},[s._v("v1.1之前")])],1),s._v("：userspace指的是linux操作系统的用户空间。这种模型，对于每个service对象，它都会随机打开一个本地端口，任何到达此端口的连接请求都会被代理至当前service对象后端的pod上。")])]),s._v(" "),t("li",[t("p",[s._v("iptables代理模型"),t("sup",[t("font",{attrs:{color:"red"}},[s._v("v1.2默认")])],1),s._v("：对于每个service对象，它都会创建iptables规则直接捕获到达该service ip+port的流量，并将其转发到service对应的后端endpoint对象。")]),s._v(" "),t("p",[s._v("**相对于userspace模型的优点：**iptables无需将流量在用户空间和内核空间来回切换，更加高效和可靠")]),s._v(" "),t("p",[s._v("**缺点：**iptables代理模型不会在被挑选的后端pod资源无响应时自动进行重定向。")])]),s._v(" "),t("li",[t("p",[s._v("ipvs代理模型"),t("sup",[t("font",{attrs:{color:"red"}},[s._v("v1.11默认")])],1),s._v("：对向service对象请求流量的调度功能由ipvs实现，余下功能任由iptables实现。")]),s._v(" "),t("p",[s._v("**优点：**ipvs构建与netfilter钩子函数之上，使用hash表作为底层数据结构并工作在内核空间，具有流量转发速度快，规则同步性能好的特性。")])])])])]),s._v(" "),t("li",[t("p",[s._v("service的yaml")]),s._v(" "),t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("kind")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Service\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("apiVersion")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" v1\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("metadata")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" bigdataweb\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("labels")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" bigdataweb\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("spec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ports")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("protocol")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" TCP\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("targetPort")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("port")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("selector")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" bigdataweb\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])])])]),s._v(" "),t("h2",{attrs:{id:"服务暴露"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务暴露","aria-hidden":"true"}},[s._v("#")]),s._v(" 服务暴露")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("Servie类型：")]),s._v(" "),t("blockquote",[t("ol",[t("li",[s._v("ClusterIP：默认service类型，集群内部可达。")]),s._v(" "),t("li",[s._v("NodePort：构建在ClusterIP之上，可以通过每个节点的"),t("nodeip",[s._v(" + "),t("port",[s._v("访问servie。")])],1)],1),s._v(" "),t("li",[s._v("LoadBalance：构建在NodePort之上，通过cloud provider提供的负载均衡器将服务暴露到集群外部")]),s._v(" "),t("li",[s._v("ExternalName：通过Service映射至由externalName字段内容指定的主机来暴露服务，此主机需要被DNS服务解析至CNAME类型的记录。此种类型service没有ClusterIP和NodePort，也没有标签选择器用于选择pod资源，因此，不会有endpoint存在。")])])])])])])},[],!1,null,null,null);e.default=r.exports}}]);