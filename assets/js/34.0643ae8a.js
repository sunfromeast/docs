(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{243:function(e,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"kubeadm概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubeadm概述","aria-hidden":"true"}},[e._v("#")]),e._v(" kubeadm概述")]),e._v(" "),a("h2",{attrs:{id:"为什么不用容器部署kubernetes？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么不用容器部署kubernetes？","aria-hidden":"true"}},[e._v("#")]),e._v(" 为什么不用容器部署kubernetes？")]),e._v(" "),a("p",[e._v("其实kube-apiserver，kube-controller-manager、kube-scheduler是可以运行在容器中的，但是，容器化kubelet会产生问题，kubelet作为kubernetes的重要组件之一，具有如下功能：")]),e._v(" "),a("ul",[a("li",[e._v("操作容器运行时，管理容器的生命周期")]),e._v(" "),a("li",[e._v("配置网络")]),e._v(" "),a("li",[e._v("管理数据卷")])]),e._v(" "),a("p",[e._v("其中，配置网络和管理数据卷都需要kubelet直接操作物理机。")]),e._v(" "),a("ol",[a("li",[e._v("对于配置网络来说，或许可以通过容器共享主机网络达到操作物理机的目的。")]),e._v(" "),a("li",[e._v("但是，对于管理数据卷来说，现在还不能隔着namespace达到直接操作物理机的目的。")])]),e._v(" "),a("p",[e._v("正因为如此，kubeadm选择了一种折中的方案：")]),e._v(" "),a("blockquote",[a("p",[e._v("kubelet运行在物理机上，其他的组件部署在容器中。")])]),e._v(" "),a("p",[e._v("所以，使用kubeadm的第一步，就是要在物理机上安装kubeadm、kubelet和kubectl三个二进制文件。")]),e._v(" "),a("p",[e._v("kubeadm项目的目的就是要让用户通过两个命令搞定集群安装：")]),e._v(" "),a("div",{staticClass:"language-markdown line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-markdown"}},[a("code",[e._v("//创建一个master节点\n$ kubeadm init\n\n//将一个node加入集群中\n$ kubeadm join "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("master节点的ip和端口")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("h2",{attrs:{id:"kubeadm的工作流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubeadm的工作流程","aria-hidden":"true"}},[e._v("#")]),e._v(" kubeadm的工作流程")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("preflight check（预检）：目的确认机器是否满足安装条件。")])]),e._v(" "),a("li",[a("p",[e._v("生成对外提供服务所需要的各种证书及对应的目录")]),e._v(" "),a("blockquote",[a("p",[e._v("除非专门开启insecure模式，否则，必须要以https的方式访问apiserver。")]),e._v(" "),a("p",[e._v("生成的证书路径："),a("code",[e._v("/etc/kubernetes/pki")])]),e._v(" "),a("p",[e._v("其中，最主要的两个是："),a("code",[e._v("ca.crt")]),e._v("和"),a("code",[e._v("ca.key")])])])]),e._v(" "),a("li",[a("p",[e._v("为其他组件生成"),a("code",[e._v("kube-apiserver")]),e._v("的配置文件")]),e._v(" "),a("blockquote",[a("p",[e._v("生成的配置文件路径："),a("code",[e._v("/etc/kubernetes/xx.conf")])]),e._v(" "),a("p",[e._v("配置文件中保存着：master的地址，端口，证书信息等，供其他组件与apiserver交互时使用。")])])]),e._v(" "),a("li",[a("p",[e._v("为Master的组件生成pod配置文件,并启动静态pod。")]),e._v(" "),a("blockquote",[a("p",[e._v("为apiserver、controller-manager、scheduler及etcd生成pod配置文件，并通过静态pod方式运行它们。")]),e._v(" "),a("p",[a("font",{attrs:{color:"red"}},[e._v("什么是静态pod？")])],1),e._v(" "),a("p",[e._v("集群尚不存在，pod的配置文件预先放置在指定的目录下（"),a("code",[e._v("/etc/kubernetes/manifest")]),e._v("），物理机上的kubelet启动时会自动加载该目录下的pod配置文件，并启动pod。")])])]),e._v(" "),a("li",[a("p",[e._v("为集群生成"),a("code",[e._v("bootstrap token")])]),e._v(" "),a("blockquote",[a("p",[e._v("任何有kubelet和kubeadm的节点，都可以通过该token加入集群中")])])]),e._v(" "),a("li",[a("p",[e._v("token生成后，kubeadm将ca.crt等重要信息通过configmap保存到etcd中，供后续部署node使用。")])]),e._v(" "),a("li",[a("p",[e._v("最后一步，安装插件，默认kube-proxy和DNS必须安装，用于提供服务发现和DNS。")])])])])},[],!1,null,null,null);t.default=r.exports}}]);